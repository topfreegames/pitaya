// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/topfreegames/pitaya/internal/message (interfaces: MessageEncoder)

// Package mock_message is a generated GoMock package.
package mock_message

import (
	gomock "github.com/golang/mock/gomock"
	message "github.com/topfreegames/pitaya/internal/message"
	reflect "reflect"
)

// MockMessageEncoder is a mock of MessageEncoder interface
type MockMessageEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockMessageEncoderMockRecorder
}

// MockMessageEncoderMockRecorder is the mock recorder for MockMessageEncoder
type MockMessageEncoderMockRecorder struct {
	mock *MockMessageEncoder
}

// NewMockMessageEncoder creates a new mock instance
func NewMockMessageEncoder(ctrl *gomock.Controller) *MockMessageEncoder {
	mock := &MockMessageEncoder{ctrl: ctrl}
	mock.recorder = &MockMessageEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessageEncoder) EXPECT() *MockMessageEncoderMockRecorder {
	return m.recorder
}

// CompressEnabled mocks base method
func (m *MockMessageEncoder) CompressEnabled() bool {
	ret := m.ctrl.Call(m, "CompressEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompressEnabled indicates an expected call of CompressEnabled
func (mr *MockMessageEncoderMockRecorder) CompressEnabled() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompressEnabled", reflect.TypeOf((*MockMessageEncoder)(nil).CompressEnabled))
}

// Encode mocks base method
func (m *MockMessageEncoder) Encode(arg0 *message.Message) ([]byte, error) {
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode
func (mr *MockMessageEncoderMockRecorder) Encode(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockMessageEncoder)(nil).Encode), arg0)
}
