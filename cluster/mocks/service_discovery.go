// Code generated by MockGen. DO NOT EDIT.
// Source: service_discovery.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	cluster "github.com/topfreegames/pitaya/cluster"
	reflect "reflect"
)

// MockServiceDiscovery is a mock of ServiceDiscovery interface
type MockServiceDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDiscoveryMockRecorder
}

// MockServiceDiscoveryMockRecorder is the mock recorder for MockServiceDiscovery
type MockServiceDiscoveryMockRecorder struct {
	mock *MockServiceDiscovery
}

// NewMockServiceDiscovery creates a new mock instance
func NewMockServiceDiscovery(ctrl *gomock.Controller) *MockServiceDiscovery {
	mock := &MockServiceDiscovery{ctrl: ctrl}
	mock.recorder = &MockServiceDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceDiscovery) EXPECT() *MockServiceDiscoveryMockRecorder {
	return m.recorder
}

// GetServersByType mocks base method
func (m *MockServiceDiscovery) GetServersByType(serverType string) (map[string]*cluster.Server, error) {
	ret := m.ctrl.Call(m, "GetServersByType", serverType)
	ret0, _ := ret[0].(map[string]*cluster.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServersByType indicates an expected call of GetServersByType
func (mr *MockServiceDiscoveryMockRecorder) GetServersByType(serverType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServersByType", reflect.TypeOf((*MockServiceDiscovery)(nil).GetServersByType), serverType)
}

// GetServer mocks base method
func (m *MockServiceDiscovery) GetServer(id string) (*cluster.Server, error) {
	ret := m.ctrl.Call(m, "GetServer", id)
	ret0, _ := ret[0].(*cluster.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer
func (mr *MockServiceDiscoveryMockRecorder) GetServer(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockServiceDiscovery)(nil).GetServer), id)
}

// GetServers mocks base method
func (m *MockServiceDiscovery) GetServers() []*cluster.Server {
	ret := m.ctrl.Call(m, "GetServers")
	ret0, _ := ret[0].([]*cluster.Server)
	return ret0
}

// GetServers indicates an expected call of GetServers
func (mr *MockServiceDiscoveryMockRecorder) GetServers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockServiceDiscovery)(nil).GetServers))
}

// SyncServers mocks base method
func (m *MockServiceDiscovery) SyncServers() error {
	ret := m.ctrl.Call(m, "SyncServers")
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncServers indicates an expected call of SyncServers
func (mr *MockServiceDiscoveryMockRecorder) SyncServers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncServers", reflect.TypeOf((*MockServiceDiscovery)(nil).SyncServers))
}

// AddListener mocks base method
func (m *MockServiceDiscovery) AddListener(listener cluster.SDListener) {
	m.ctrl.Call(m, "AddListener", listener)
}

// AddListener indicates an expected call of AddListener
func (mr *MockServiceDiscoveryMockRecorder) AddListener(listener interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockServiceDiscovery)(nil).AddListener), listener)
}

// Init mocks base method
func (m *MockServiceDiscovery) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockServiceDiscoveryMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockServiceDiscovery)(nil).Init))
}

// AfterInit mocks base method
func (m *MockServiceDiscovery) AfterInit() {
	m.ctrl.Call(m, "AfterInit")
}

// AfterInit indicates an expected call of AfterInit
func (mr *MockServiceDiscoveryMockRecorder) AfterInit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterInit", reflect.TypeOf((*MockServiceDiscovery)(nil).AfterInit))
}

// BeforeShutdown mocks base method
func (m *MockServiceDiscovery) BeforeShutdown() {
	m.ctrl.Call(m, "BeforeShutdown")
}

// BeforeShutdown indicates an expected call of BeforeShutdown
func (mr *MockServiceDiscoveryMockRecorder) BeforeShutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeShutdown", reflect.TypeOf((*MockServiceDiscovery)(nil).BeforeShutdown))
}

// Shutdown mocks base method
func (m *MockServiceDiscovery) Shutdown() error {
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockServiceDiscoveryMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockServiceDiscovery)(nil).Shutdown))
}
