// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockModule is a mock of Module interface
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockModule) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockModuleMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockModule)(nil).Init))
}

// AfterInit mocks base method
func (m *MockModule) AfterInit() {
	m.ctrl.Call(m, "AfterInit")
}

// AfterInit indicates an expected call of AfterInit
func (mr *MockModuleMockRecorder) AfterInit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterInit", reflect.TypeOf((*MockModule)(nil).AfterInit))
}

// BeforeShutdown mocks base method
func (m *MockModule) BeforeShutdown() {
	m.ctrl.Call(m, "BeforeShutdown")
}

// BeforeShutdown indicates an expected call of BeforeShutdown
func (mr *MockModuleMockRecorder) BeforeShutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeShutdown", reflect.TypeOf((*MockModule)(nil).BeforeShutdown))
}

// Shutdown mocks base method
func (m *MockModule) Shutdown() error {
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockModuleMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockModule)(nil).Shutdown))
}

// MockBindingStorage is a mock of BindingStorage interface
type MockBindingStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBindingStorageMockRecorder
}

// MockBindingStorageMockRecorder is the mock recorder for MockBindingStorage
type MockBindingStorageMockRecorder struct {
	mock *MockBindingStorage
}

// NewMockBindingStorage creates a new mock instance
func NewMockBindingStorage(ctrl *gomock.Controller) *MockBindingStorage {
	mock := &MockBindingStorage{ctrl: ctrl}
	mock.recorder = &MockBindingStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBindingStorage) EXPECT() *MockBindingStorageMockRecorder {
	return m.recorder
}

// GetUserFrontendID mocks base method
func (m *MockBindingStorage) GetUserFrontendID(uid, frontendType string) (string, error) {
	ret := m.ctrl.Call(m, "GetUserFrontendID", uid, frontendType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFrontendID indicates an expected call of GetUserFrontendID
func (mr *MockBindingStorageMockRecorder) GetUserFrontendID(uid, frontendType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFrontendID", reflect.TypeOf((*MockBindingStorage)(nil).GetUserFrontendID), uid, frontendType)
}

// PutBinding mocks base method
func (m *MockBindingStorage) PutBinding(uid string) error {
	ret := m.ctrl.Call(m, "PutBinding", uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutBinding indicates an expected call of PutBinding
func (mr *MockBindingStorageMockRecorder) PutBinding(uid interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBinding", reflect.TypeOf((*MockBindingStorage)(nil).PutBinding), uid)
}
